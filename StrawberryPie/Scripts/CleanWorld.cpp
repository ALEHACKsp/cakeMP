#include <Common.h>
#include <Scripts/CleanWorld.h>

#include <shv/main.h>
#include <shv/natives.h>

#include <Enums/GameControl.h>
#include <AudioFlags.h>
#include <GameScripts.h>
#include <Utils.h>

void scriptCleanWorld()
{
	bool terminated = false;
	//bool msg = false;
	//unsigned long chat;

	while (true) {
		if(!terminated && !DLC2::GET_IS_LOADING_SCREEN_ACTIVE()) {
			terminated = true;

			//DISABLE ROCKSTAR EDITOR
			GAMEPLAY::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME("replay_controller");
			GAMEPLAY::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME("selector");

			for (int i = 0; i < (sizeof(_gameScripts)/sizeof(*_gameScripts)); i++) {
				GAMEPLAY::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(_gameScripts[i]);
			}
			logWrite("Game scripts unloaded.");

			AUDIO::SET_AUDIO_FLAG(_audioFlags[(int)AudioFlag::LoadMPData], true);
			AUDIO::SET_AUDIO_FLAG(_audioFlags[(int)AudioFlag::DisableBarks], true);
			AUDIO::SET_AUDIO_FLAG(_audioFlags[(int)AudioFlag::DisableFlightMusic], true);
			AUDIO::SET_AUDIO_FLAG(_audioFlags[(int)AudioFlag::PoliceScannerDisabled], true);
			AUDIO::SET_AUDIO_FLAG(_audioFlags[(int)AudioFlag::OnlyAllowScriptTriggerPoliceScanner], true);
			AUDIO::_FORCE_AMBIENT_SIREN(false);

			//DLC2::_LOAD_SP_DLC_MAPS();
			//DLC2::_LOAD_MP_DLC_MAPS();
			//GAMEPLAY::_USE_FREEMODE_MAP_BEHAVIOR(true);

			//int minimap = GRAPHICS::REQUEST_SCALEFORM_MOVIE("minimap");
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(minimap, "MULTIPLAYER_IS_ACTIVE");
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(true);
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(false);
			//GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
			//UI::_SET_RADAR_BIGMAP_ENABLED(true, false);
			//UI::_SET_RADAR_BIGMAP_ENABLED(false, false);

			//chat = GRAPHICS::REQUEST_SCALEFORM_MOVIE("multiplayer_chat");

			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(chat, "SET_FOCUS");
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(2);
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(2);
			//GRAPHICS::_BEGIN_TEXT_COMPONENT("STRING");
			//UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("ALL");
			//GRAPHICS::_END_TEXT_COMPONENT();
			//GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();

			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(chat, "SET_FOCUS");
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(1);
			//GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(2);
			//GRAPHICS::_BEGIN_TEXT_COMPONENT("STRING");
			//UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("ALL");
			//GRAPHICS::_END_TEXT_COMPONENT();
			//GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
			
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100, 1);
			//STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1, 1);
			//STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1, 1);
			STATS::STAT_SET_INT(GAMEPLAY::GET_HASH_KEY("MP0_NO_MORE_TUTORIALS"), 1, 1);


		}

		Player player = PLAYER::PLAYER_ID();
		Ped playerPed = PLAYER::PLAYER_PED_ID();

		if (!ENTITY::DOES_ENTITY_EXIST(playerPed)) {
			continue;
		}

		//GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(chat, 255, 255, 255, 255, 0);

		//if (!msg)
		//{
		//	msg = true;
		//	GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(chat, "ADD_MESSAGE");
		//	GRAPHICS::_BEGIN_TEXT_COMPONENT("STRING");
		//	UI::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("TEST");
		//	GRAPHICS::_END_TEXT_COMPONENT();
		//	GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
		//}


		PLAYER::SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(player, 0.0f);
		PLAYER::SET_POLICE_IGNORE_PLAYER(player, true);
		PLAYER::SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(player, false);
		PLAYER::_0xD2B315B6689D537D(player, false);

		if (PLAYER::GET_PLAYER_WANTED_LEVEL(player) > 0) {
			PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
		}

		VEHICLE::SET_RANDOM_BOATS(false);
		VEHICLE::SET_RANDOM_TRAINS(false);
		VEHICLE::SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(0.0f);
		VEHICLE::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(0.0f);
		VEHICLE::SET_NUMBER_OF_PARKED_VEHICLES(-1);
		VEHICLE::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(false);
		VEHICLE::SET_FAR_DRAW_VEHICLES(false);
		VEHICLE::_DISPLAY_DISTANT_VEHICLES(false);

		PED::SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(0.0f);
		PED::SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(0.0f, 0.0f);
		PED::SET_CAN_ATTACK_FRIENDLY(playerPed, true, true);
		PED::SET_PED_CAN_BE_TARGETTED(playerPed, true);

		MOBILE::DESTROY_MOBILE_PHONE();

		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::EnterCheatCode, true);
		//CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::FrontendPause, true);
		//CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::FrontendPauseAlternate, true);
		//CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::FrontendSocialClub, true);
		//CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::FrontendSocialClubSecondary, true);
		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::SpecialAbility, true);
		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::SpecialAbilityPC, true);
		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::SpecialAbilitySecondary, true);
		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::CharacterWheel, true);
		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::Phone, true);
		CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::Duck, true);

		if (PED::GET_PED_PARACHUTE_STATE(playerPed) == 2) {
			CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::Aim, true);
			CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::Attack, true);
		}

		if (PED::IS_PED_RAGDOLL(playerPed)) {
			CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::Attack, true);
			CONTROLS::DISABLE_CONTROL_ACTION(0, GameControl::Attack2, true);
		}

		UI::HIDE_HELP_TEXT_THIS_FRAME();
		UI::DISPLAY_CASH(false);

		DECISIONEVENT::SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME();
		DECISIONEVENT::SUPPRESS_AGITATION_EVENTS_NEXT_FRAME();

		if (GAMEPLAY::IS_STUNT_JUMP_IN_PROGRESS()) {
			GAMEPLAY::CANCEL_STUNT_JUMP();
		}

		WAIT(0);
	}
}
